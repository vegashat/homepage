{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Feed } from './feed';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RssService = /*#__PURE__*/(() => {\n  class RssService {\n    constructor(_http) {\n      this._http = _http;\n      this._headers = new HttpHeaders().set('Access-Control-Allow-Origin', '*');\n      this._headers = this._headers.append('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS');\n      this._headers = this._headers.append('Access-Control-Allow-Headers', 'Origin, Content-Type, X-Auth-Token');\n      this._headers = this._headers.append('Access-Control-Allow-Origin', '*');\n      this._headers = this._headers.append('Accept', 'text/xml');\n      this._headers = this._headers.append('Content-Type', 'text/xml');\n    }\n\n    getFeed(url, count) {\n      return this._http.get(url, {\n        headers: this._headers,\n        responseType: 'text'\n      }).pipe(map(data => {\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(data, 'text/xml'); //xml.getElementsByTagName('item')[0].getElementsByTagName('title')[0].textContent\n\n        let results = [];\n        let items = xml.getElementsByTagName('item');\n        let itemCount = 0;\n\n        while (itemCount < count) {\n          let title = items[itemCount].getElementsByTagName('title')[0].textContent;\n          let description = items[itemCount].getElementsByTagName('description')[0].textContent;\n          let link = items[itemCount].getElementsByTagName('link')[0].textContent;\n          results.push(new Feed(title == null ? '' : title, description == null ? '' : description, link == null ? '' : link));\n          itemCount++;\n        }\n        /*\n        const feedAsJson = this._ngxXml2jsonService.xmlToJson(xml);\n        let results = feedAsJson['rss'][\"channel\"][\"item\"].map(({title, description, link}) =>\n            {\n                let tempFeed : Feed = new Feed(title,description,link);\n                return tempFeed;\n            });\n        */\n\n\n        return results;\n      }));\n    }\n\n    handleError(err) {\n      console.log(err.message);\n    }\n\n  }\n\n  RssService.ɵfac = function RssService_Factory(t) {\n    return new (t || RssService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RssService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RssService,\n    factory: RssService.ɵfac\n  });\n  return RssService;\n})();","map":null,"metadata":{},"sourceType":"module"}